/**
 * This file is generated by dconfig2cpp.
 * Command line arguments: /home/zccrs/projects/dtkcore/build/unknown-Debug/tools/dconfig2cpp/dconfig2cpp /home/zccrs/projects/treeland/misc/dconfig/org.deepin.treeland.json
 * Generation time: 2024-12-04T10:42:45
 * JSON file version: 1.0
 *
 * WARNING: DO NOT MODIFY THIS FILE MANUALLY.
 * If you need to change the content, please modify the dconfig2cpp tool.
 */

#ifndef ORG_DEEPIN_TREELAND_H
#define ORG_DEEPIN_TREELAND_H

#include <QThread>
#include <QVariant>
#include <DConfig>

class org_deepin_treeland : public QObject {
    Q_OBJECT

    Q_PROPERTY(QString activeColor READ activeColor WRITE setActiveColor NOTIFY activeColorChanged)
    Q_PROPERTY(qint64 currentWorkspace READ currentWorkspace WRITE setCurrentWorkspace NOTIFY currentWorkspaceChanged)
    Q_PROPERTY(bool cursorBlink READ cursorBlink WRITE setCursorBlink NOTIFY cursorBlinkChanged)
    Q_PROPERTY(qint64 cursorBlinkTime READ cursorBlinkTime WRITE setCursorBlinkTime NOTIFY cursorBlinkTimeChanged)
    Q_PROPERTY(qint64 cursorSize READ cursorSize WRITE setCursorSize NOTIFY cursorSizeChanged)
    Q_PROPERTY(QString cursorThemeName READ cursorThemeName WRITE setCursorThemeName NOTIFY cursorThemeNameChanged)
    Q_PROPERTY(qint64 dndDragThreshold READ dndDragThreshold WRITE setDndDragThreshold NOTIFY dndDragThresholdChanged)
    Q_PROPERTY(qint64 doubleClickDistance READ doubleClickDistance WRITE setDoubleClickDistance NOTIFY doubleClickDistanceChanged)
    Q_PROPERTY(qint64 doubleClickTime READ doubleClickTime WRITE setDoubleClickTime NOTIFY doubleClickTimeChanged)
    Q_PROPERTY(QString font READ font WRITE setFont NOTIFY fontChanged)
    Q_PROPERTY(qint64 fontSize READ fontSize WRITE setFontSize NOTIFY fontSizeChanged)
    Q_PROPERTY(bool forceSoftwareCursor READ forceSoftwareCursor WRITE setForceSoftwareCursor NOTIFY forceSoftwareCursorChanged)
    Q_PROPERTY(QString iconThemeName READ iconThemeName WRITE setIconThemeName NOTIFY iconThemeNameChanged)
    Q_PROPERTY(QString lostScreen READ lostScreen WRITE setLostScreen NOTIFY lostScreenChanged)
    Q_PROPERTY(qint64 maxWorkspace READ maxWorkspace WRITE setMaxWorkspace NOTIFY maxWorkspaceChanged)
    Q_PROPERTY(QString monoFont READ monoFont WRITE setMonoFont NOTIFY monoFontChanged)
    Q_PROPERTY(qint64 numWorkspace READ numWorkspace WRITE setNumWorkspace NOTIFY numWorkspaceChanged)
    Q_PROPERTY(bool preferDark READ preferDark WRITE setPreferDark NOTIFY preferDarkChanged)
    Q_PROPERTY(bool showOnLock READ showOnLock WRITE setShowOnLock NOTIFY showOnLockChanged)
    Q_PROPERTY(QString themeName READ themeName WRITE setThemeName NOTIFY themeNameChanged)
    Q_PROPERTY(qint64 windowOpacity READ windowOpacity WRITE setWindowOpacity NOTIFY windowOpacityChanged)
    Q_PROPERTY(qint64 windowRadius READ windowRadius WRITE setWindowRadius NOTIFY windowRadiusChanged)
    Q_PROPERTY(qint64 windowThemeType READ windowThemeType WRITE setWindowThemeType NOTIFY windowThemeTypeChanged)
    Q_PROPERTY(qint64 windowTitlebarHeight READ windowTitlebarHeight WRITE setWindowTitlebarHeight NOTIFY windowTitlebarHeightChanged)
public:
    explicit org_deepin_treeland(QThread *thread, const QString &appId, const QString &name, const QString &subpath, QObject *parent = nullptr)
        : QObject(parent) {
        if (!thread->isRunning()) {
            qWarning() << QStringLiteral("Warning: The provided thread is not running.");
        }
        Q_ASSERT(QThread::currentThread() != thread);
        auto worker = new QObject();
        worker->moveToThread(thread);
        QMetaObject::invokeMethod(worker, [this, worker, appId, name, subpath]() {
            auto config = DTK_CORE_NAMESPACE::DConfig::create(appId, name, subpath, nullptr);
            if (!config) {
                qWarning() << QStringLiteral("Failed to create DConfig instance.");
                worker->deleteLater();
                return;
            }
            config->moveToThread(QThread::currentThread());
            initialize(config);
            worker->deleteLater();
        });
    }
    explicit org_deepin_treeland(QThread *thread, DTK_CORE_NAMESPACE::DConfigBackend *backend, const QString &appId, const QString &name, const QString &subpath,
                           QObject *parent = nullptr)
        : QObject(parent) {
        if (!thread->isRunning()) {
            qWarning() << QStringLiteral("Warning: The provided thread is not running.");
        }
        Q_ASSERT(QThread::currentThread() != thread);
        auto worker = new QObject();
        worker->moveToThread(thread);
        QMetaObject::invokeMethod(worker, [this, worker, backend, appId, name, subpath]() {
            auto config = DTK_CORE_NAMESPACE::DConfig::create(backend, appId, name, subpath, nullptr);
            if (!config) {
                qWarning() << QStringLiteral("Failed to create DConfig instance.");
                worker->deleteLater();
                return;
            }
            config->moveToThread(QThread::currentThread());
            initialize(config);
            worker->deleteLater();
        });
    }
    explicit org_deepin_treeland(QThread *thread, const QString &name, const QString &subpath,
                                  QObject *parent = nullptr)
        : QObject(parent) {
        if (!thread->isRunning()) {
            qWarning() << QStringLiteral("Warning: The provided thread is not running.");
        }
        Q_ASSERT(QThread::currentThread() != thread);
        auto worker = new QObject();
        worker->moveToThread(thread);
        QMetaObject::invokeMethod(worker, [this, worker, name, subpath]() {
            auto config = DTK_CORE_NAMESPACE::DConfig::createGeneric(name, subpath, nullptr);
            if (!config) {
                qWarning() << QStringLiteral("Failed to create DConfig instance.");
                worker->deleteLater();
                return;
            }
            config->moveToThread(QThread::currentThread());
            initialize(config);
            worker->deleteLater();
        });
    }
    explicit org_deepin_treeland(QThread *thread, DTK_CORE_NAMESPACE::DConfigBackend *backend, const QString &name, const QString &subpath = QString(),
                                  QObject *parent = nullptr)
        : QObject(parent) {
        if (!thread->isRunning()) {
            qWarning() << QStringLiteral("Warning: The provided thread is not running.");
        }
        Q_ASSERT(QThread::currentThread() != thread);
        auto worker = new QObject();
        worker->moveToThread(thread);
        QMetaObject::invokeMethod(worker, [this, worker, backend, name, subpath]() {
            auto config = DTK_CORE_NAMESPACE::DConfig::createGeneric(backend, name, subpath, nullptr);
            if (!config) {
                qWarning() << QStringLiteral("Failed to create DConfig instance.");
                worker->deleteLater();
                return;
            }
            config->moveToThread(QThread::currentThread());
            initialize(config);
            worker->deleteLater();
        });
    }

    ~org_deepin_treeland() {
        if (m_config) {
            m_config->deleteLater();
        }
    }

        QString activeColor() const {
        return p_activeColor;
    }
    void setActiveColor(const QString &value) {
        auto oldValue = p_activeColor;
        p_activeColor = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("activeColor"), value);
        });
        if (p_activeColor != oldValue) {
            Q_EMIT activeColorChanged();
        }
    }
    qint64 currentWorkspace() const {
        return p_currentWorkspace;
    }
    void setCurrentWorkspace(const qint64 &value) {
        auto oldValue = p_currentWorkspace;
        p_currentWorkspace = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("currentWorkspace"), value);
        });
        if (p_currentWorkspace != oldValue) {
            Q_EMIT currentWorkspaceChanged();
        }
    }
    bool cursorBlink() const {
        return p_cursorBlink;
    }
    void setCursorBlink(const bool &value) {
        auto oldValue = p_cursorBlink;
        p_cursorBlink = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("cursorBlink"), value);
        });
        if (p_cursorBlink != oldValue) {
            Q_EMIT cursorBlinkChanged();
        }
    }
    qint64 cursorBlinkTime() const {
        return p_cursorBlinkTime;
    }
    void setCursorBlinkTime(const qint64 &value) {
        auto oldValue = p_cursorBlinkTime;
        p_cursorBlinkTime = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("cursorBlinkTime"), value);
        });
        if (p_cursorBlinkTime != oldValue) {
            Q_EMIT cursorBlinkTimeChanged();
        }
    }
    qint64 cursorSize() const {
        return p_cursorSize;
    }
    void setCursorSize(const qint64 &value) {
        auto oldValue = p_cursorSize;
        p_cursorSize = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("cursorSize"), value);
        });
        if (p_cursorSize != oldValue) {
            Q_EMIT cursorSizeChanged();
        }
    }
    QString cursorThemeName() const {
        return p_cursorThemeName;
    }
    void setCursorThemeName(const QString &value) {
        auto oldValue = p_cursorThemeName;
        p_cursorThemeName = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("cursorThemeName"), value);
        });
        if (p_cursorThemeName != oldValue) {
            Q_EMIT cursorThemeNameChanged();
        }
    }
    qint64 dndDragThreshold() const {
        return p_dndDragThreshold;
    }
    void setDndDragThreshold(const qint64 &value) {
        auto oldValue = p_dndDragThreshold;
        p_dndDragThreshold = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("dndDragThreshold"), value);
        });
        if (p_dndDragThreshold != oldValue) {
            Q_EMIT dndDragThresholdChanged();
        }
    }
    qint64 doubleClickDistance() const {
        return p_doubleClickDistance;
    }
    void setDoubleClickDistance(const qint64 &value) {
        auto oldValue = p_doubleClickDistance;
        p_doubleClickDistance = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("doubleClickDistance"), value);
        });
        if (p_doubleClickDistance != oldValue) {
            Q_EMIT doubleClickDistanceChanged();
        }
    }
    qint64 doubleClickTime() const {
        return p_doubleClickTime;
    }
    void setDoubleClickTime(const qint64 &value) {
        auto oldValue = p_doubleClickTime;
        p_doubleClickTime = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("doubleClickTime"), value);
        });
        if (p_doubleClickTime != oldValue) {
            Q_EMIT doubleClickTimeChanged();
        }
    }
    QString font() const {
        return p_font;
    }
    void setFont(const QString &value) {
        auto oldValue = p_font;
        p_font = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("font"), value);
        });
        if (p_font != oldValue) {
            Q_EMIT fontChanged();
        }
    }
    qint64 fontSize() const {
        return p_fontSize;
    }
    void setFontSize(const qint64 &value) {
        auto oldValue = p_fontSize;
        p_fontSize = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("fontSize"), value);
        });
        if (p_fontSize != oldValue) {
            Q_EMIT fontSizeChanged();
        }
    }
    bool forceSoftwareCursor() const {
        return p_forceSoftwareCursor;
    }
    void setForceSoftwareCursor(const bool &value) {
        auto oldValue = p_forceSoftwareCursor;
        p_forceSoftwareCursor = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("forceSoftwareCursor"), value);
        });
        if (p_forceSoftwareCursor != oldValue) {
            Q_EMIT forceSoftwareCursorChanged();
        }
    }
    QString iconThemeName() const {
        return p_iconThemeName;
    }
    void setIconThemeName(const QString &value) {
        auto oldValue = p_iconThemeName;
        p_iconThemeName = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("iconThemeName"), value);
        });
        if (p_iconThemeName != oldValue) {
            Q_EMIT iconThemeNameChanged();
        }
    }
    QString lostScreen() const {
        return p_lostScreen;
    }
    void setLostScreen(const QString &value) {
        auto oldValue = p_lostScreen;
        p_lostScreen = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("lostScreen"), value);
        });
        if (p_lostScreen != oldValue) {
            Q_EMIT lostScreenChanged();
        }
    }
    qint64 maxWorkspace() const {
        return p_maxWorkspace;
    }
    void setMaxWorkspace(const qint64 &value) {
        auto oldValue = p_maxWorkspace;
        p_maxWorkspace = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("maxWorkspace"), value);
        });
        if (p_maxWorkspace != oldValue) {
            Q_EMIT maxWorkspaceChanged();
        }
    }
    QString monoFont() const {
        return p_monoFont;
    }
    void setMonoFont(const QString &value) {
        auto oldValue = p_monoFont;
        p_monoFont = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("monoFont"), value);
        });
        if (p_monoFont != oldValue) {
            Q_EMIT monoFontChanged();
        }
    }
    qint64 numWorkspace() const {
        return p_numWorkspace;
    }
    void setNumWorkspace(const qint64 &value) {
        auto oldValue = p_numWorkspace;
        p_numWorkspace = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("numWorkspace"), value);
        });
        if (p_numWorkspace != oldValue) {
            Q_EMIT numWorkspaceChanged();
        }
    }
    bool preferDark() const {
        return p_preferDark;
    }
    void setPreferDark(const bool &value) {
        auto oldValue = p_preferDark;
        p_preferDark = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("preferDark"), value);
        });
        if (p_preferDark != oldValue) {
            Q_EMIT preferDarkChanged();
        }
    }
    bool showOnLock() const {
        return p_showOnLock;
    }
    void setShowOnLock(const bool &value) {
        auto oldValue = p_showOnLock;
        p_showOnLock = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("showOnLock"), value);
        });
        if (p_showOnLock != oldValue) {
            Q_EMIT showOnLockChanged();
        }
    }
    QString themeName() const {
        return p_themeName;
    }
    void setThemeName(const QString &value) {
        auto oldValue = p_themeName;
        p_themeName = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("themeName"), value);
        });
        if (p_themeName != oldValue) {
            Q_EMIT themeNameChanged();
        }
    }
    qint64 windowOpacity() const {
        return p_windowOpacity;
    }
    void setWindowOpacity(const qint64 &value) {
        auto oldValue = p_windowOpacity;
        p_windowOpacity = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("windowOpacity"), value);
        });
        if (p_windowOpacity != oldValue) {
            Q_EMIT windowOpacityChanged();
        }
    }
    qint64 windowRadius() const {
        return p_windowRadius;
    }
    void setWindowRadius(const qint64 &value) {
        auto oldValue = p_windowRadius;
        p_windowRadius = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("windowRadius"), value);
        });
        if (p_windowRadius != oldValue) {
            Q_EMIT windowRadiusChanged();
        }
    }
    qint64 windowThemeType() const {
        return p_windowThemeType;
    }
    void setWindowThemeType(const qint64 &value) {
        auto oldValue = p_windowThemeType;
        p_windowThemeType = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("windowThemeType"), value);
        });
        if (p_windowThemeType != oldValue) {
            Q_EMIT windowThemeTypeChanged();
        }
    }
    qint64 windowTitlebarHeight() const {
        return p_windowTitlebarHeight;
    }
    void setWindowTitlebarHeight(const qint64 &value) {
        auto oldValue = p_windowTitlebarHeight;
        p_windowTitlebarHeight = value;
        QMetaObject::invokeMethod(m_config, [this, value]() {
            m_config->setValue(QStringLiteral("windowTitlebarHeight"), value);
        });
        if (p_windowTitlebarHeight != oldValue) {
            Q_EMIT windowTitlebarHeightChanged();
        }
    }
Q_SIGNALS:
    void activeColorChanged();
    void currentWorkspaceChanged();
    void cursorBlinkChanged();
    void cursorBlinkTimeChanged();
    void cursorSizeChanged();
    void cursorThemeNameChanged();
    void dndDragThresholdChanged();
    void doubleClickDistanceChanged();
    void doubleClickTimeChanged();
    void fontChanged();
    void fontSizeChanged();
    void forceSoftwareCursorChanged();
    void iconThemeNameChanged();
    void lostScreenChanged();
    void maxWorkspaceChanged();
    void monoFontChanged();
    void numWorkspaceChanged();
    void preferDarkChanged();
    void showOnLockChanged();
    void themeNameChanged();
    void windowOpacityChanged();
    void windowRadiusChanged();
    void windowThemeTypeChanged();
    void windowTitlebarHeightChanged();
private:
    void initialize(DTK_CORE_NAMESPACE::DConfig *config) {
        Q_ASSERT(!m_config);
        m_config = config;
        updateValue(QStringLiteral("activeColor"), QVariant::fromValue(p_activeColor));
        updateValue(QStringLiteral("currentWorkspace"), QVariant::fromValue(p_currentWorkspace));
        updateValue(QStringLiteral("cursorBlink"), QVariant::fromValue(p_cursorBlink));
        updateValue(QStringLiteral("cursorBlinkTime"), QVariant::fromValue(p_cursorBlinkTime));
        updateValue(QStringLiteral("cursorSize"), QVariant::fromValue(p_cursorSize));
        updateValue(QStringLiteral("cursorThemeName"), QVariant::fromValue(p_cursorThemeName));
        updateValue(QStringLiteral("dndDragThreshold"), QVariant::fromValue(p_dndDragThreshold));
        updateValue(QStringLiteral("doubleClickDistance"), QVariant::fromValue(p_doubleClickDistance));
        updateValue(QStringLiteral("doubleClickTime"), QVariant::fromValue(p_doubleClickTime));
        updateValue(QStringLiteral("font"), QVariant::fromValue(p_font));
        updateValue(QStringLiteral("fontSize"), QVariant::fromValue(p_fontSize));
        updateValue(QStringLiteral("forceSoftwareCursor"), QVariant::fromValue(p_forceSoftwareCursor));
        updateValue(QStringLiteral("iconThemeName"), QVariant::fromValue(p_iconThemeName));
        updateValue(QStringLiteral("lostScreen"), QVariant::fromValue(p_lostScreen));
        updateValue(QStringLiteral("maxWorkspace"), QVariant::fromValue(p_maxWorkspace));
        updateValue(QStringLiteral("monoFont"), QVariant::fromValue(p_monoFont));
        updateValue(QStringLiteral("numWorkspace"), QVariant::fromValue(p_numWorkspace));
        updateValue(QStringLiteral("preferDark"), QVariant::fromValue(p_preferDark));
        updateValue(QStringLiteral("showOnLock"), QVariant::fromValue(p_showOnLock));
        updateValue(QStringLiteral("themeName"), QVariant::fromValue(p_themeName));
        updateValue(QStringLiteral("windowOpacity"), QVariant::fromValue(p_windowOpacity));
        updateValue(QStringLiteral("windowRadius"), QVariant::fromValue(p_windowRadius));
        updateValue(QStringLiteral("windowThemeType"), QVariant::fromValue(p_windowThemeType));
        updateValue(QStringLiteral("windowTitlebarHeight"), QVariant::fromValue(p_windowTitlebarHeight));

        connect(config, &DTK_CORE_NAMESPACE::DConfig::valueChanged, this, [this](const QString &key) {
            updateValue(key);
        }, Qt::DirectConnection);
    }
    void updateValue(const QString &key, const QVariant &fallback = QVariant()) {
        Q_ASSERT(QThread::currentThread() == m_config->thread());
        const QVariant &value = m_config->value(key, fallback);
        if (key == QStringLiteral("activeColor")) {
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_activeColor != newValue) {
                    p_activeColor = newValue;
                    Q_EMIT activeColorChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("currentWorkspace")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_currentWorkspace != newValue) {
                    p_currentWorkspace = newValue;
                    Q_EMIT currentWorkspaceChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("cursorBlink")) {
            auto newValue = qvariant_cast<bool>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_cursorBlink != newValue) {
                    p_cursorBlink = newValue;
                    Q_EMIT cursorBlinkChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("cursorBlinkTime")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_cursorBlinkTime != newValue) {
                    p_cursorBlinkTime = newValue;
                    Q_EMIT cursorBlinkTimeChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("cursorSize")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_cursorSize != newValue) {
                    p_cursorSize = newValue;
                    Q_EMIT cursorSizeChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("cursorThemeName")) {
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_cursorThemeName != newValue) {
                    p_cursorThemeName = newValue;
                    Q_EMIT cursorThemeNameChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("dndDragThreshold")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_dndDragThreshold != newValue) {
                    p_dndDragThreshold = newValue;
                    Q_EMIT dndDragThresholdChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("doubleClickDistance")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_doubleClickDistance != newValue) {
                    p_doubleClickDistance = newValue;
                    Q_EMIT doubleClickDistanceChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("doubleClickTime")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_doubleClickTime != newValue) {
                    p_doubleClickTime = newValue;
                    Q_EMIT doubleClickTimeChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("font")) {
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_font != newValue) {
                    p_font = newValue;
                    Q_EMIT fontChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("fontSize")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_fontSize != newValue) {
                    p_fontSize = newValue;
                    Q_EMIT fontSizeChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("forceSoftwareCursor")) {
            auto newValue = qvariant_cast<bool>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_forceSoftwareCursor != newValue) {
                    p_forceSoftwareCursor = newValue;
                    Q_EMIT forceSoftwareCursorChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("iconThemeName")) {
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_iconThemeName != newValue) {
                    p_iconThemeName = newValue;
                    Q_EMIT iconThemeNameChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("lostScreen")) {
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_lostScreen != newValue) {
                    p_lostScreen = newValue;
                    Q_EMIT lostScreenChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("maxWorkspace")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_maxWorkspace != newValue) {
                    p_maxWorkspace = newValue;
                    Q_EMIT maxWorkspaceChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("monoFont")) {
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_monoFont != newValue) {
                    p_monoFont = newValue;
                    Q_EMIT monoFontChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("numWorkspace")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_numWorkspace != newValue) {
                    p_numWorkspace = newValue;
                    Q_EMIT numWorkspaceChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("preferDark")) {
            auto newValue = qvariant_cast<bool>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_preferDark != newValue) {
                    p_preferDark = newValue;
                    Q_EMIT preferDarkChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("showOnLock")) {
            auto newValue = qvariant_cast<bool>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_showOnLock != newValue) {
                    p_showOnLock = newValue;
                    Q_EMIT showOnLockChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("themeName")) {
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_themeName != newValue) {
                    p_themeName = newValue;
                    Q_EMIT themeNameChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("windowOpacity")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_windowOpacity != newValue) {
                    p_windowOpacity = newValue;
                    Q_EMIT windowOpacityChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("windowRadius")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_windowRadius != newValue) {
                    p_windowRadius = newValue;
                    Q_EMIT windowRadiusChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("windowThemeType")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_windowThemeType != newValue) {
                    p_windowThemeType = newValue;
                    Q_EMIT windowThemeTypeChanged();
                }
            });
            return;
        }
        if (key == QStringLiteral("windowTitlebarHeight")) {
            auto newValue = qvariant_cast<qint64>(value);
            QMetaObject::invokeMethod(this, [this, newValue]() {
                if (p_windowTitlebarHeight != newValue) {
                    p_windowTitlebarHeight = newValue;
                    Q_EMIT windowTitlebarHeightChanged();
                }
            });
            return;
        }
    }
    DTK_CORE_NAMESPACE::DConfig *m_config = nullptr;

    QString p_activeColor { QStringLiteral("") };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_currentWorkspace { 0 };
    bool p_cursorBlink { true };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_cursorBlinkTime { 1200 };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_cursorSize { 24 };
    QString p_cursorThemeName { QStringLiteral("bloom") };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_dndDragThreshold { 8 };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_doubleClickDistance { 5 };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_doubleClickTime { 250 };
    QString p_font { QStringLiteral("Source Han Sans SC") };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_fontSize { 105 };
    bool p_forceSoftwareCursor { false };
    QString p_iconThemeName { QStringLiteral("bloom") };
    QString p_lostScreen { QStringLiteral("MoveToPrimary") };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_maxWorkspace { 6 };
    QString p_monoFont { QStringLiteral("Noto Mono") };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_numWorkspace { 2 };
    bool p_preferDark { false };
    bool p_showOnLock { false };
    QString p_themeName { QStringLiteral("") };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_windowOpacity { 100 };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_windowRadius { 18 };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_windowThemeType { 0 };
    // Note: If you expect a double type, add 'e' to the number in the JSON value field, e.g., "value": 1.0e, not just 1.0
    qint64 p_windowTitlebarHeight { 30 };
};

#endif // ORG_DEEPIN_TREELAND_H
